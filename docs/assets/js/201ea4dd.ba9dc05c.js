"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2368],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,k=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return n?a.createElement(k,i(i({ref:t},u),{},{components:n})):a.createElement(k,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),r=n(6010);const o="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,i),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(7462),r=n(7294),o=n(6010),i=n(2389),s=n(7392),l=n(7094),c=n(2466);const u="tabList__CuJ",d="tabItem_LNqP";function p(e){var t;const{lazy:n,block:i,defaultValue:p,values:m,groupId:k,className:g}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=m??f.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),h=(0,s.l)(b,((e,t)=>e.value===t.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===p?p:p??(null==(t=f.find((e=>e.props.default)))?void 0:t.props.value)??f[0].props.value;if(null!==y&&!b.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:S}=(0,l.U)(),[T,w]=(0,r.useState)(y),N=[],{blockElementScrollPositionUntilNextRender:E}=(0,c.o5)();if(null!=k){const e=v[k];null!=e&&e!==T&&b.some((t=>t.value===e))&&w(e)}const A=e=>{const t=e.currentTarget,n=N.indexOf(t),a=b[n].value;a!==T&&(E(t),w(a),null!=k&&S(k,String(a)))},O=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=N.indexOf(e.currentTarget)+1;n=N[t]??N[0];break}case"ArrowLeft":{const t=N.indexOf(e.currentTarget)-1;n=N[t]??N[N.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":i},g)},b.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>N.push(e),onKeyDown:O,onFocus:A,onClick:A},i,{className:(0,o.Z)("tabs__item",d,null==i?void 0:i.className,{"tabs__item--active":T===t})}),n??t)}))),n?(0,r.cloneElement)(f.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function m(e){const t=(0,i.Z)();return r.createElement(p,(0,a.Z)({key:String(t)},e))}},6400:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var a=n(7462),r=(n(7294),n(3905)),o=n(5488),i=n(5162);const s={sidebar_position:2},l="Staking & UnStaking",c={unversionedId:"frontend-integration/sdk/stake",id:"frontend-integration/sdk/stake",title:"Staking & UnStaking",description:"---",source:"@site/docs2/frontend-integration/sdk/stake.mdx",sourceDirName:"frontend-integration/sdk",slug:"/frontend-integration/sdk/stake",permalink:"/my-solana-docs2/frontend-integration/sdk/stake",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"solidoSidebar",previous:{title:"All methods",permalink:"/my-solana-docs2/frontend-integration/sdk/sdk-methods"},next:{title:"Error codes",permalink:"/my-solana-docs2/frontend-integration/sdk/errors"}},u={},d=[{value:"1. Initialize the library",id:"1-initialize-the-library",level:3},{value:"2. Call stake method",id:"2-call-stake-method",level:3},{value:"2. Prepare stake transaction",id:"2-prepare-stake-transaction",level:3},{value:"3. Sign and confirm transaction",id:"3-sign-and-confirm-transaction",level:3},{value:"2. Prepare stake transaction",id:"2-prepare-stake-transaction-1",level:3},{value:"3. Sign and confirm transaction",id:"3-sign-and-confirm-transaction-1",level:3}],p={toc:d};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"staking--unstaking"},"Staking & UnStaking"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"1-initialize-the-library"},"1. Initialize the library"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { SolidoSDK } from '@lidofinance/solido-sdk';\nimport { Connection } from '@solana/web3.js';\n\n// Change rpc endpoint to yours, or whole connection\nconst connection = new Connection('https://test.rpcpool.com');\n\nconst solidoSDK = new SolidoSDK('mainnet-beta', connection, 'your_solana_referral_address');\n")),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"easy-way",label:"Easiest way",mdxType:"TabItem"},(0,r.kt)("h3",{id:"2-call-stake-method"},"2. Call stake method"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type SetTxStageCallback = (props: {\n  txStage: TX_STAGE;\n  transactionHash?: TransactionSignature; // for TX_STAGE.AWAITING_BLOCK stage\n  deactivatingSolAccountAddress?: PublicKey; // for TX_STAGE.AWAITING_SIGNING stage unstake instructions\n  stSolAccountAddress?: PublicKey; // for TX_STAGE.AWAITING_SIGNING stage stake instructions\n}) => void;\n\n\ntry {\n  const { transactionHash, stSolAccountAddress } = await solidoSDK.stake({\n    amount: 20, // The amount of SOL-s which need to stake\n    wallet: wallet, // Wallet instance\n    setTxStage: setTxStageCallback, // Optional callback for getting information about transaction stage (see TX_STAGE)\n  });\n} catch (e) {\n  // Handle Errors\n}\n"))),(0,r.kt)(i.Z,{value:"detailed-way",label:"Detailed way",mdxType:"TabItem"},(0,r.kt)("h3",{id:"2-prepare-stake-transaction"},"2. Prepare stake transaction"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"try {\n  const { transaction, stSolAccountAddress } = await solidoSDK.getStakeTransaction({\n    amount: 20, // The amount of SOL-s which need to stake\n    payerAddress: new PublicKey(wallet.publicKey),\n  });\n} catch (e) {\n  // Handle Errors\n}\n")),(0,r.kt)("h3",{id:"3-sign-and-confirm-transaction"},"3. Sign and confirm transaction"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"try {\n  const transactionHash = await solidoSDK.signAndConfirmTransaction({\n    transaction: transaction, // Previous step\n    wallet: wallet, // Wallet instance\n    setTxStage: setTxStageCallback, // Optional callback for getting information about transaction stage (see TX_STAGE)\n  });\n} catch (e) {\n  // Handle Errors\n}\n"))),(0,r.kt)(i.Z,{value:"profi-way",label:"Profi way",mdxType:"TabItem"},(0,r.kt)("h3",{id:"2-prepare-stake-transaction-1"},"2. Prepare stake transaction"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"try {\n  const { transaction, stSolAccountAddress } = await solidoSDK.getStakeTransaction({\n    amount: 20, // The amount of SOL-s which need to stake\n    payerAddress: new PublicKey(wallet.publicKey),\n  });\n} catch (e) {\n  // Handle Errors\n}\n")),(0,r.kt)("h3",{id:"3-sign-and-confirm-transaction-1"},"3. Sign and confirm transaction"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"try {\n  // Do something before singing transaction\n  const signed = await wallet.signTransaction(stakeTransaction);\n\n  const transactionHash = await connection.sendRawTransaction(signed.serialize());\n\n  // Do something before confirming transaction\n  const { value: status } = await connection.confirmTransaction(transactionHash);\n\n  if (status?.err) {\n    throw status.err;\n  }\n\n  // Do something after getting success transaction\n} catch (e) {\n  // Handle Errors\n}\n")))),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"You may get an exception if amount exceed maximum available SOL-s in balance. In order to prevent this exception, you can call"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const maxStakeAmount = await solidoSDK.calculateMaxStakeAmount(new PublicKey(wallet.publicKey));\n"))),(0,r.kt)("h1",{id:"unstaking"},"Unstaking"),(0,r.kt)("p",null,"Unstaking process if whole the same as staking, also arguments are the same, just methods rename:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getStakeTransaction")," => ",(0,r.kt)("inlineCode",{parentName:"li"},"getUnStakeTransaction")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"calculateMaxStakeAmount")," => ",(0,r.kt)("inlineCode",{parentName:"li"},"calculateMaxUnStakeAmount")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"stake")," => ",(0,r.kt)("inlineCode",{parentName:"li"},"unStake"))),(0,r.kt)("br",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"enum TX_STAGE {\n  AWAITING_SIGNING = 1,\n  AWAITING_BLOCK = 2,\n  SUCCESS = 3,\n  ERROR = 4,\n}\n")))}m.isMDXComponent=!0}}]);